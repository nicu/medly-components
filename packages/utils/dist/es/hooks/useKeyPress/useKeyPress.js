import{useState as r,useCallback as e,useEffect as n}from"react";import t from"@babel/runtime/helpers/slicedToArray";import o from"@babel/runtime/helpers/toConsumableArray";var i=function(i){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1],u=arguments.length>2?arguments[2]:void 0;if(0===i.length)throw new Error("[Invalid parameter]: 'targetKeys' cannot be empty.");var y=r([]),c=t(y,2),l=c[0],s=c[1],d=r(!1),f=t(d,2),v=f[0],p=f[1],m=e((function(r){r.repeat||(Array.isArray(i)?i.includes(r.key):r.key===i)&&(s((function(e){return Array.from(new Set([].concat(o(e),[r.key])))})),a&&r.stopPropagation())}),[a,i]),k=e((function(r){(Array.isArray(i)?i.includes(r.key):r.key===i)&&(s((function(e){return e.filter((function(e){return e!==r.key}))})),a&&r.stopPropagation())}),[a,i]);return n((function(){Array.isArray(i)?p(i.every((function(r,e){return l[e]===r}))):p(l.includes(i))}),[i,l]),n((function(){var r,e=null!==(r=null==u?void 0:u.current)&&void 0!==r?r:window;return e.addEventListener("keydown",m),e.addEventListener("keyup",k),function(){e.removeEventListener("keydown",m),e.removeEventListener("keyup",k)}}),[]),v};export{i as useKeyPress};
